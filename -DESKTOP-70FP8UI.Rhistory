mlg.filter(Arab_gclone, distance = xdist) <- 1 + .Machine$double.eps^0.5
# pdf("./output/plots/DArT_genotype_accumulation_curve.pdf", width = 8, height = 6)
# genotype_curve(Arab_gclone, sample = 1000, quiet = TRUE)
# dev.off()
# Contract MLGs based on distance
Arab_dist <- bitwise.dist(Arab_gclone, mat=TRUE, euclidean = TRUE, percent = FALSE)
# xdist <- dist(genind2df(Arab_gclone, usepop = FALSE))
mlg.filter(Arab_gclone, distance = Arab_dist) <- 1 + .Machine$double.eps^0.5
Arab_gclone
mlg.table(Arab_gclone, strata = ~.)
mlg.table(Arab_gclone, strata = ~id)
?bitwise.dist
# xdist <- dist(genind2df(Arab_gclone, usepop = FALSE))
mlg.filter(Arab_gclone, distance = bitwise.dist) <- 1 + .Machine$double.eps^0.5
Arab_gclone
# xdist <- dist(genind2df(Arab_gclone, usepop = FALSE))
mlg.filter(Arab_gclone, distance = bitwise.dist, percent = FALSE) <- 1 + .Machine$double.eps^0.5
Arab_gclone
?filter_stats
# pdf("./output/plots/DArT_genotype_accumulation_curve.pdf", width = 8, height = 6)
# genotype_curve(Arab_gclone, sample = 1000, quiet = TRUE)
# dev.off()
# assess distance and clustering algorithm
gclone_filtered <- filter_stats(Arab_gclone, plot = TRUE)
?bruvo.dist
names(gclone_filtered)
gclone_filtered %>% map(~cutoff_predictor(.$THRESHOLDS))
thresh_predict <- gclone_filtered %>% map(~cutoff_predictor(.$THRESHOLDS))
?mlg.filter
# xdist <- dist(genind2df(Arab_gclone, usepop = FALSE))
mlg.filter(Arab_gclone) <- 1 + .Machine$double.eps^0.5
Arab_gclone
gclone_filtered
thresh_predict
alg_choice <- "average"
thresh_predict[[alg_choice]]
# xdist <- dist(genind2df(Arab_gclone, usepop = FALSE))
mlg.filter(Arab_gclone, distance = bitwise.dist, percent = FALSE, algorithm = alg_choice) <- thresh_predict[[alg_choice]]
Arab_gclone
Arab_tab <- mlg.table(Arab_gclone) #, strata = ~State)
Arab_tab
Arab_tab <- mlg.table(Arab_gclone, strata = ~State) %>% as.data.frame()
Arab_tab
Arab_tab <- mlg.table(Arab_gclone, strata = ~State) %>% as.data.frame() %>% rownames_to_column("id") %>%
pivot_longer(select_if(is.numeric), names_to = "MLG", values_to = "Count")
?select_if
Arab_tab <- mlg.table(Arab_gclone, strata = ~State) %>% as.data.frame() %>% rownames_to_column("id") %>%
pivot_longer(select_if(., is.numeric), names_to = "MLG", values_to = "Count")
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>% rownames_to_column("id") %>%
pivot_longer(vars(select_if(., is.numeric)), names_to = "MLG", values_to = "Count")
?vars
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>% rownames_to_column("id") %>%
pivot_longer(all_vars(is.numeric), names_to = "MLG", values_to = "Count")
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>% rownames_to_column("id") %>%
pivot_longer(all_vars(is.numeric(.)), names_to = "MLG", values_to = "Count")
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>%
pivot_longer(all_vars(), names_to = "MLG", values_to = "Count") %>% rownames_to_column("id")
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>%
pivot_longer(colnames(.), names_to = "MLG", values_to = "Count") %>% rownames_to_column("id")
Arab_tab
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>% rownames_to_column("id") %>%
pivot_longer(vars(-1), names_to = "MLG", values_to = "Count")
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>% rownames_to_column("id") %>%
pivot_longer(-1, names_to = "MLG", values_to = "Count")
Arab_tab
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>% rownames_to_column("State") %>%
pivot_longer(-1, names_to = "MLG", values_to = "Count")
Arab_tab
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>% rownames_to_column("State") %>%
pivot_longer(-1, names_to = "MLG", values_to = "Count") %>% filter(Count>0)
Arab_tab
Arab_tab <- mlg.table(Arab_gclone, strata = ~State, plot = FALSE) %>% as.data.frame() %>% rownames_to_column("State") %>%
pivot_longer(-1, names_to = "MLG", values_to = "Count") %>% filter(Count>0) %>% arrange(desc(Count))
Arab_tab
# plot MLGs shared by states
Arab_tab %>% group_by(MLG) %>% count(State)
Arab_gclone@strata %>% bind_cols(Arab_gclone@mlg@mlg)
Arab_gclone@strata %>% bind_cols(Arab_gclone@mlg@mlg) %>% select(id, State, MLG=contracted)
MLG_isolate_map <- Arab_gclone@strata %>% bind_cols(Arab_gclone@mlg@mlg) %>% select(id, State, MLG=contracted)
MLG_isolate_map %>% group_by(MLG, State) %>% summarise(n())
MLG_isolate_map %>% group_by(MLG) %>% summarise(n(State))
MLG_isolate_map %>% group_by(MLG, State) %>% summarise(n(State))
?count
MLG_isolate_map %>% group_by(MLG) %>% count(State)
MLG_isolate_map %>% group_by(MLG) %>% count(State) %>% arrange(desc(n))
Arab_tab
ggplot(Arab_tab, aes(x=MLG, y=Count, fill=State)) +
geom_bar(stat = "identity")
# plot MLGs shared by states
Arab_tab %>% group_by(MLG) %>% count(State)
ggplot(Arab_tab, aes(x=MLG, y=Count, fill=State)) +
geom_bar(stat = "identity") + coord_flip()
my_colours$State
Arab_tab
# select the top MLGs
Arab_tab %>% group_by(MLG) %>% count(State)
Arab_tab
# select the top MLGs
Arab_tab %>% group_by(MLG) %>% tally(Count)
# select the top MLGs
Arab_tab %>% group_by(MLG) %>% tally(Count) %>% arrange(desc(n))
# select the top MLGs
plot_data <- Arab_tab %>% group_by(MLG) %>% tally(Count) %>% arrange(desc(n)) %>% filter(n>=3)
plot_data
ggplot(Arab_tab %>% filter(MLG %in% plot_data$MLG), aes(x=MLG, y=Count, fill=State)) +
geom_bar(stat = "identity") + coord_flip() +
scale_fill_manual(values = my_colours$State)
# select the top MLGs
shared_MLGs <- Arab_tab %>% group_by(MLG) %>% tally(Count) %>% arrange(desc(n)) %>% filter(n>=3)
# select the top MLGs
shared_MLGs <- Arab_tab %>% group_by(MLG) %>% tally(Count) %>% arrange(desc(n)) %>% filter(n>=3)
?fct_reorder
# plot MLGs shared by states
plot_mlgs <- Arab_tab %>% filter(MLG %in% shared_MLGs$MLG) %>%
mutate(State=factor(State, levels=levels(Arab_gclone@strata$State)), MLG=fct_reorder(factor(MLG), Count))
plot_mlgs
ggplot(plot_mlgs, aes(x=MLG, y=Count, fill=State)) +
geom_bar(stat = "identity") + coord_flip() +
scale_fill_manual(values = my_colours$State)
# plot MLGs shared by states
plot_mlgs <- Arab_tab %>% filter(MLG %in% shared_MLGs$MLG) %>%
mutate(State=factor(State, levels=levels(Arab_gclone@strata$State)), MLG=fct_reorder(factor(MLG), Count, .desc = TRUE))
shared_MLGs
# plot MLGs shared by states
plot_mlgs <- Arab_tab %>% filter(MLG %in% shared_MLGs$MLG) %>%
mutate(State=factor(State, levels=levels(Arab_gclone@strata$State)), MLG=factor(MLG, levels = shared_MLGs$MLG))
ggplot(plot_mlgs, aes(x=MLG, y=Count, fill=State)) +
geom_bar(stat = "identity") + coord_flip() +
scale_fill_manual(values = my_colours$State)
Arab_tab %>% group_by(MLG) %>% tally(State)
Arab_tab %>% group_by(MLG) %>% count(State)
Arab_tab
Arab_tab %>% count(MLG)
Arab_tab %>% count(MLG) %>% arrange(desc(n))
# select the top MLGs
shared_MLGs <- Arab_tab %>% count(MLG) %>% arrange(desc(n)) %>% filter(n>1)
shared_MLGs
Arab_tab %>% filter(MLG %in% shared_MLGs$MLG) %>% tally(Count)
Arab_tab %>% filter(MLG %in% shared_MLGs$MLG) %>% group_by(MLG) %>% summarise(sum(Count)) %>%
arrange(desc(MLG))
Arab_tab %>% filter(MLG %in% shared_MLGs$MLG) %>% group_by(MLG) %>% summarise(Total=sum(Count)) %>%
arrange(desc(Total))
# plot MLGs shared by states
plot_mlgs <- Arab_tab %>% filter(MLG %in% MLGs_ordered$MLG) %>%
mutate(State=factor(State, levels=levels(Arab_gclone@strata$State)), MLG=factor(MLG, levels = MLGs_ordered$MLG))
MLGs_ordered <- Arab_tab %>% filter(MLG %in% shared_MLGs$MLG) %>% group_by(MLG) %>% summarise(Total=sum(Count)) %>%
arrange(desc(Total))
# plot MLGs shared by states
plot_mlgs <- Arab_tab %>% filter(MLG %in% MLGs_ordered$MLG) %>%
mutate(State=factor(State, levels=levels(Arab_gclone@strata$State)), MLG=factor(MLG, levels = MLGs_ordered$MLG))
ggplot(plot_mlgs, aes(x=MLG, y=Count, fill=State)) +
geom_bar(stat = "identity") + coord_flip() +
scale_fill_manual(values = my_colours$State)
# save plot
ggsave("output/plots/A_rabiei_poppr_shared_MLG.pdf", width = 7, height=5)
ggplot(plot_mlgs, aes(x=MLG, y=Count, fill=State)) +
geom_bar(stat = "identity", width=0.6) + coord_flip() +
scale_fill_manual(values = my_colours$State)
ggplot(plot_mlgs, aes(x=MLG, y=Count, fill=State)) +
geom_bar(stat = "identity", width=0.8) + coord_flip() +
scale_fill_manual(values = my_colours$State)
ggplot(plot_mlgs, aes(x=MLG, y=Count, fill=State)) +
geom_bar(stat = "identity", width=0.75) + coord_flip() +
scale_fill_manual(values = my_colours$State)
# save plot
ggsave("output/plots/A_rabiei_poppr_shared_MLG.pdf", width = 7, height=5)
# By Pathotype
# Calculate the MSN
setPop(Arab_gclone) <- ~Pathotype
pc_colors <-  brewer.pal(9, "RdYlGn")[round(seq(1,9, length.out = nPop(Arab_gclone) ) ,0)] %>% rev(.) %>%
setNames(paste0("Group", 0:5) )
pc_colors
pc_colors <-  brewer.pal(9, "RdYlGn")[round(seq(1,9, length.out = nPop(Arab_gclone)-1 ) ,0)] %>% rev(.) %>%
setNames(paste0("Group", 0:5) )
Arab_gclone
pc_colors <-  brewer.pal(9, "RdYlGn")[round(seq(1,9, length.out = nPop(Arab_gclone)-1 ) ,0)] %>% rev(.) %>%
setNames(paste0("Group", 0:5) ) %>% c(., "Unknown"="grey")
pc_colors
# Contract MLGs based on distance
set.seed(120)
mdist <- bitwise.dist(Arab_gclone, mat=TRUE, euclidean = FALSE, percent = FALSE)
pdf(filedate(sprintf("Arab_regions_msn_patho"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = 1 + .Machine$double.eps^0.5,
palette = pc_colors, vertex.label = NA, margin=rep(-0.2,4))
dev.off()
levels(Arab_gclone@strata$Pathotype)
pop(Arab_gclone)
# fix factor levels
pop(Arab_gclone) <- Arab_gclone@strata$Pathotype
pop(Arab_gclone)
# fix factor levels
levels(pop(Arab_gclone)) <- levels(Arab_gclone@strata$Pathotype)
pop(Arab_gclone)
?fct_relevel
pc_colors <-  brewer.pal(9, "RdYlGn")[round(seq(2,9, length.out = nPop(Arab_gclone)-1 ) ,0)] %>% rev(.) %>%
setNames(paste0("Group", 0:5) ) %>% c(., "Unknown"="grey")
# Contract MLGs based on distance
set.seed(120)
pdf(filedate(sprintf("Arab_regions_msn_patho"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = 1 + .Machine$double.eps^0.5,
palette = pc_colors, vertex.label = NA, margin=rep(-0.2,4))
dev.off()
pc_colors <-  brewer.pal(9, "RdYlGn")[round(seq(1,8, length.out = nPop(Arab_gclone)-1 ) ,0)] %>% rev(.) %>%
setNames(paste0("Group", 0:5) ) %>% c(., "Unknown"="grey")
pdf(filedate(sprintf("Arab_regions_msn_patho"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = 1 + .Machine$double.eps^0.5,
palette = pc_colors, vertex.label = NA, margin=rep(-0.2,4))
dev.off()
#### plot haplotype Networks ####
# By state
setPop(Arab_gclone) <- ~State
levels(pop(Arab_gclone))
levels(pop(Arab_gclone)) <- levels(Arab_gclone$strata$State)
# setNames(c("QLD", "NSW", "VIC", "SA", "WA"))
# Contract MLGs based on distance
# Arab_gclone@strata <- strata_factors
# setPop(Arab_gclone) <- ~Region
set.seed(120)
pdf(filedate(sprintf("Arab_regions_msn_all_hosts"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = my_colours$State, vertex.label = NA, margin=rep(-0.2,4))
dev.off()
pdf(filedate(sprintf("Arab_regions_msn_all_hosts2"), ".pdf", "output/plots"), width = 10, height = 7)
plot_poppr_msn(Arab_gclone, pe_data.msn,  palette = my_colours$State,  nodescale = 15, inds = "none",
margin=rep(0,4))#, nodebase = 1.25) #
dev.off()
#### plot haplotype Networks ####
# By state
setPop(Arab_gclone) <- ~State
pop(Arab_gclone)
pop(Arab_gclone) <- factor(pop(Arab_gclone), levels = levels(Arab_gclone$strata$State))
# pe_data <- Arab_gclone # %>%  missingno("genotype", cutoff=0.2)
my_colours$State
pop(Arab_gclone)
?pop
Arab_gclone@pop
Arab_gclone@pop <- factor(Arab_gclone@pop, levels = levels(Arab_gclone$strata$State))
Arab_gclone@pop
# setNames(c("QLD", "NSW", "VIC", "SA", "WA"))
# Contract MLGs based on distance
# Arab_gclone@strata <- strata_factors
# setPop(Arab_gclone) <- ~Region
set.seed(120)
mdist <- bitwise.dist(Arab_gclone, mat=TRUE, euclidean = FALSE, percent = FALSE)
pdf(filedate(sprintf("Arab_regions_msn_all_hosts"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = my_colours$State, vertex.label = NA, margin=rep(-0.2,4))
dev.off()
# Visualize the network
set.seed(120)
pdf(filedate(sprintf("Arab_regions_msn_all_hosts2"), ".pdf", "output/plots"), width = 10, height = 7)
plot_poppr_msn(Arab_gclone, pe_data.msn,  palette = my_colours$State,  nodescale = 15, inds = "none",
margin=rep(0,4))#, nodebase = 1.25) #
dev.off()
# By Pathotype
Arab_gclone@pop <- Arab_gclone$strata$Pathotype
Arab_gclone
# Calculate the MSN
# brewer.pal.info
pc_colors <-  brewer.pal(9, "RdYlGn")[round(seq(1,8, length.out = nPop(Arab_gclone)-1 ) ,0)] %>% rev(.) %>%
setNames(paste0("Group", 0:5) ) %>% c(., "Unknown"="grey")
popNames(Arab_gclone)
# Calculate the MSN
# brewer.pal.info
pc_colors <-  c("grey", brewer.pal(9, "RdYlGn")[round(seq(1,8, length.out = nPop(Arab_gclone)-1 ) ,0)]) %>% rev(.) %>%
setNames(popNames(Arab_gclone))
pc_colors
# Contract MLGs based on distance
set.seed(120)
mdist <- bitwise.dist(Arab_gclone, mat=TRUE, euclidean = FALSE, percent = FALSE)
pdf(filedate(sprintf("Arab_regions_msn_patho"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = pc_colors, vertex.label = NA, margin=rep(-0.2,4))
dev.off()
# Contract MLGs based on distance
set.seed(120)
pdf(filedate(sprintf("Arab_regions_msn_patho"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = pc_colors, vertex.label = NA, margin=rep(-0.4,4), gweight = FALSE)
dev.off()
?poppr.msn
# Contract MLGs based on distance
set.seed(120)
pdf(filedate(sprintf("Arab_regions_msn_patho"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = pc_colors, vertex.label = NA, margin=rep(0,4), wscale = FALSE)
dev.off()
pdf(filedate(sprintf("Arab_regions_msn_patho"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = pc_colors, vertex.label = NA, margin=rep(-0.1,4), wscale = FALSE)
dev.off()
# setNames(c("QLD", "NSW", "VIC", "SA", "WA"))
# Contract MLGs based on distance
# Arab_gclone@strata <- strata_factors
# setPop(Arab_gclone) <- ~Region
set.seed(120)
mdist <- bitwise.dist(Arab_gclone, mat=TRUE, euclidean = FALSE, percent = FALSE)
pdf(filedate(sprintf("Arab_regions_msn_all_hosts"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = my_colours$State, vertex.label = NA, margin=rep(-0.1,4), wscale = FALSE)
#### plot haplotype Networks ####
# By state
# setPop(Arab_gclone) <- ~State
Arab_gclone@pop <- Arab_gclone$strata$State
# pe_data <- Arab_gclone # %>%  missingno("genotype", cutoff=0.2)
# my_colours$State
# Calculate the MSN
# pc_colors <- nPop(Arab_gclone) %>%
#   RColorBrewer::brewer.pal("Set1") %>%
#   setNames(levels(Arab_gclone@strata$State))
# setNames(c("QLD", "NSW", "VIC", "SA", "WA"))
# Contract MLGs based on distance
# Arab_gclone@strata <- strata_factors
# setPop(Arab_gclone) <- ~Region
set.seed(120)
mdist <- bitwise.dist(Arab_gclone, mat=TRUE, euclidean = FALSE, percent = FALSE)
pdf(filedate(sprintf("Arab_regions_msn_all_hosts"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = my_colours$State, vertex.label = NA, margin=rep(-0.1,4), wscale = FALSE)
dev.off()
dev.off
dev.off()
dev.off()
# pe_data <- Arab_gclone # %>%  missingno("genotype", cutoff=0.2)
# my_colours$State
# Calculate the MSN
# pc_colors <- nPop(Arab_gclone) %>%
#   RColorBrewer::brewer.pal("Set1") %>%
#   setNames(levels(Arab_gclone@strata$State))
# setNames(c("QLD", "NSW", "VIC", "SA", "WA"))
# Contract MLGs based on distance
# Arab_gclone@strata <- strata_factors
# setPop(Arab_gclone) <- ~Region
set.seed(120)
pdf(filedate(sprintf("Arab_regions_msn_all_hosts"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = my_colours$State, vertex.label = NA, margin=rep(-0.1,4), wscale = FALSE)
dev.off()
pdf(filedate(sprintf("Arab_regions_msn_all_hosts"), ".pdf", "output/plots"), width = 10, height = 7)
pe_data.msn <- poppr.msn(Arab_gclone, mdist, showplot = TRUE, threshold = thresh_predict[[alg_choice]],
palette = my_colours$State, vertex.label = NA, margin=rep(-0.1,4), wscale = FALSE)
dev.off()
?hclust
lsm
pairs(regrid(lsm))
pairs(lsm
)
pairs(lsm) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value))
signif_lsm <- pairs(lsm) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value)) %>%
write_xlsx(., "output/A_rabiei_DArT_poppr.xlsx", sheet = "pathotype_cluster_stats", asTable=FALSE, overwritesheet = TRUE) %>% filter(p.value<0.05)
# Stacked bar plots, based on odds-ratio
ggplot(prop_table, aes(x=Cluster, y=Freq, fill=Pathotype_class)) +
geom_bar(stat="identity", width=0.6) +
scale_fill_brewer(palette = "Set1") +
labs(fill="Virulence\nClassification") +
annotate("text", x="C", y = 1.05, label='***')
ggsave("output/plots/A_rabiei_cluster_path_classification_OR_signif.pdf", width = 7, height=5)
# Stacked bar plots, add, based on paired ddelta
ggplot(prop_table, aes(x=Cluster, y=Freq, fill=Pathotype_class)) +
geom_bar(stat="identity", width=0.6) +
scale_fill_brewer(palette = "Set1") +
labs(fill="Virulence\nClassification") +
annotate("text", x=levels(prop_table$Cluster), y = 1.05, label=c("ab", "ab", "c\n***", "bc\n*", "a", "ab"))
ggsave("output/plots/A_rabiei_cluster_path_classification_bar.pdf", width = 7, height=5)
signif_lsm <- pairs(lsm) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value)) %>%
write_xlsx(., "output/A_rabiei_DArT_poppr.xlsx", sheet = "pathotype_cluster_OR_stats", asTable=FALSE, overwritesheet = TRUE) %>% filter(p.value<0.05)
signif_lsm <- pairs(regrid(lsm)) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value)) %>%
write_xlsx(., "output/A_rabiei_DArT_poppr.xlsx", sheet = "pathotype_cluster_diff_stats", asTable=FALSE, overwritesheet = TRUE)
pairs(regrid(lsm)) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value))
pairs(regrid(lsm)) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value)) %>%
write_xlsx(., "output/A_rabiei_DArT_poppr.xlsx", sheet = "pathotype_cluster_diff_stats", asTable=FALSE, overwritesheet = TRUE)
pairs(lsm) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value))
rep(LETTERS[1:6], 2)
matrix(signif_lsm$odds.ratio, nrow = 6, dimnames = list(LETTERS[1:6], LETTERS[1:6])
)
lsm_mat <- matrix(NA, nrow = 6, dimnames = list(LETTERS[1:6], LETTERS[1:6]))
lsm_mat <- matrix(NA, nrow = 6, ncol = 6,  dimnames = list(LETTERS[1:6], LETTERS[1:6]))
lsm_mat
?matrix
lower.tri(lsm_mat) <- signif_lsm$odds.ratio
?lower.tri
lsm_mat[lower.tri(lsm_mat)] <- signif_lsm$odds.ratio
lsm_mat
lsm_mat
pairs(lsm) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value))
lsm_mat <- matrix(NA, nrow = 6, ncol = 6,  dimnames = list(LETTERS[1:6], LETTERS[1:6]))
lsm_mat[upper.tri(lsm_mat)]
lsm_mat[upper.tri(lsm_mat)] <- signif_lsm$odds.ratio
signif_lsm$odds.ratio
signif_lsm <- pairs(lsm) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value))
lsm_mat <- matrix(NA, nrow = 6, ncol = 6,  dimnames = list(LETTERS[1:6], LETTERS[1:6]))
lsm_mat[upper.tri(lsm_mat)] <- signif_lsm$odds.ratio
lsm_mat <- matrix(NA, nrow = 6, ncol = 6,  dimnames = list(LETTERS[1:6], LETTERS[1:6]))
lsm_mat[lower.tri(lsm_mat)] <- signif_lsm$odds.ratio
lsm_mat
pairs(lsm) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value)) %>% mutate(inv=1/odd.ratio)
pairs(lsm) %>% as.data.frame() %>% mutate(stars=stars.pval(p.value)) %>% mutate(inv=1/odds.ratio)
Arab_gclone
# Generate population genetics metrices
region_pop_gen <- poppr(Arab_gclone) %>% mutate(lambda_corr=N/(N - 1) * lambda, CF=MLG/N)  %>%
write_xlsx(., "./output/A_rabiei_DArT_poppr.xlsx", "years_by_region", asTable = FALSE, overwritesheet = TRUE)
pdf("./output/plots/A_rabiei_DArT_poppr_rare_state.pdf", width = 8, height = 6)
region_rare <- diversity_ci(Arab_gclone, n=100, rarefy = TRUE, raw=FALSE) %>%
write_xlsx(., "./output/A_rabiei_DArT_poppr.xlsx", "by_region_rare", asTable = FALSE, append=TRUE, overwritesheet = TRUE)
dev.off()
Arab_by_years <- Arab_gclone
Arab_by_years@pop
Arab_by_years@pop <- Arab_by_years@strata$Year
Arab_by_years@pop
# Generate population genetics metrices
year_pop_gen <- poppr(Arab_by_years) %>% mutate(lambda_corr=N/(N - 1) * lambda, CF=MLG/N) %>%
write_xlsx(., "./output/A_rabiei_DArT_poppr.xlsx", "by_year_all_regions", asTable = FALSE, append = TRUE,
overwritesheet = TRUE)
pdf("./output/plots/A_rabiei_DArT_poppr_rare_year.pdf", width = 8, height = 6)
year_pop_gen_rare <- diversity_ci(Arab_by_years, n=100, rarefy = TRUE, raw=FALSE) %>%
write_xlsx(., "./output/A_rabiei_DArT_poppr.xlsx", "by_year_rare", asTable = FALSE, append=TRUE, overwritesheet = TRUE)
dev.off()
save.image(filedate("A_rabiei_DArT", ".RData"))
# load custom functions from github
devtools::source_gist("7f63547158ecdbacf31b54a58af0d1cc", filename = "util.R")
# install dependencies
# BiocManager::install(c("SNPRelate", "qvalue"))
# install.packages(c("backports", "colorspace", "adegenet"))
# load packages we're going to use
# BiocManager::install("qvalue", update = FALSE)
pacman::p_load(  tidyverse, forcats, RColorBrewer, paletteer, ggrepel, glue, dartR, poppr, SNPassoc,
dendextend, ComplexHeatmap) # quadprog, raster, mvtnorm,pheatmap
#### Read DArT Data ####
pheno_file <- recent_file("data", "A_rabiei_pathotypes.+.xlsx")
package_version("ComplexHeatmap")
packageVersion("ComplexHeatmap")
pacman::p_cite("ComplexHeatmap")
pacman::p_cite("ComplexHeatmap", copy2clip = TRUE)
#### Read DArT Data ####
pheno_file <- recent_file("data", "A_rabiei_pathotypes.+.xlsx")
isolate_table <- readxl::read_excel(path = pheno_file , sheet = "pathotyping") %>% #select(-one_of(c("Location"))) %>%
mutate(Taxa=Isolate) %>%
mutate(Host=sub("^Genesis09[0-9]+$", "Genesis090",
sub(" ", "", sub("PBA ", "", Host))))
taxa_regions <- readxl::read_excel("output/dart_samples_sum_IB_S.xlsx", sheet = "taxa_regions") %>%
select(Taxa, Region)
taxa_table <- readxl::read_excel("data/Taxa_DArTseq_Plates1-2_5-05-19.xlsx", na = c("N/A", "")) %>%
inner_join(taxa_regions) %>%
mutate(Host=sub("^Genesis09[0-9]+$", "Genesis090",
sub(" ", "", sub("PBA ", "", Host)))) %>%
mutate_at(.vars=c("Year"), as.numeric) %>% select(Taxa, Location,  State, Region, Year, Host, Haplotype) %>%
full_join(isolate_table, by = c("Taxa", "State", "Year", "Host")) %>% mutate(State=sub("[^A-Z]", "", toupper(State))) %>%
mutate(Location=if_else(is.na(Location.x), Location.y, Location.x))
ssr_haplos <- readxl::read_excel("data/5_year_complete_SSR_db.xlsx")
# gl1_2 <- gl.read.dart("data/Report_DAsc19-4108_ArabieiPlates1-2/Report_DAsc19-4108_1_moreOrders_SNP_mapping_2.csv")
gl3 <- gl.read.dart("data/Report-DAsc19-4353_ArabieiPlate3/Report_DAsc19-4353_1_moreOrders_SNP_mapping_2.csv")
# fix replaced names
replace_names <- c("122/17-1"= "122-1/17","122/17-2"="122-2/17","122/17-3"="122-3/17","14HOR15"="14HOR015",
"17HOR009"="17HOR002",
# "F14038"="14038", "F14039"="14039", "F14040"="14040", "F14090"="FT14090", "F17201-1"="17201-1",
"F15009"="FT15009","F15019"="FT15019", "F15021"="FT15021",
"F16181-1"="FT16187-1",
"F16188-1"="FT16188-1",
# "MER-17-373"="MER17373", "MER-17-374"= "MER17374", "MER-17-376"= "MER17376", "MER-17-378"= "MER17378", "MER-17-379"= "MER17379", "MER-17-380"="MER17380", "MER-17-381"="MER17381",                 "MER-17-382"="MER17382",
"AS17083"="AS18083", "AS17087"="AS18087")
metadata <- tibble(indNames=indNames(gl3)) %>%
mutate(Taxa=if_else(is.na(replace_names[indNames]), indNames, replace_names[indNames]))  %>%
# left_join(isolate_table, by = c("Taxa"="Isolate")) %>%
left_join(taxa_table)
# read in data with metadata in place
Arab_gl <- gl.read.dart("data/Report-DAsc19-4353_ArabieiPlate3/Report_DAsc19-4353_1_moreOrders_SNP_mapping_2.csv",
ind.metafile = "data/DArT_metadata.csv")
sum_table <- read_csv("data/DArT_metadata.csv") %>% filter(State!="SPAIN") %>% count(Year, State) %>%
pivot_wider(names_from = State, values_from = n) %>% mutate_all(~replace_na(., 0)) %>%
mutate(Total=rowSums(.[-1]), Year=as.character(Year)) %>%
rbind(., c(NA, as.double(summarise_if(., is_double, ~sum(.))))) %>% mutate(Year = replace_na(Year, "Total"))
# set consistent strata
strata_factors <- Arab_gl@other$ind.metrics %>%
# select(indNames, Location, State, Region, Year, Host, Pathotype, Path_rating, Haplotype, Taxa) %>%
mutate(rowname=id, State=factor(State, levels = c("QLD", "NSW", "VIC", "SA", "WA", "SPAIN")),
Year=factor(Year, levels=as.character(min(Year, na.rm = TRUE):max(Year, na.rm = TRUE))),
Host=fct_relevel(fct_infreq(fct_lump_min(Host, min=6)), "Other", after = Inf),
Haplotype=fct_relevel(fct_infreq(fct_lump_min(Haplotype, min=2)), "Other", after = Inf),
Path.Group=factor(Pathotype, levels=paste0("Group", 0:5))) %>%
mutate_at(vars(Year, Host, Haplotype, Pathotype, Region), ~fct_explicit_na(., na_level = "Unknown")) %>%
column_to_rownames()
# set consistent strata
strata_factors <- Arab_gl@other$ind.metrics %>%
# select(indNames, Location, State, Region, Year, Host, Pathotype, Path_rating, Haplotype, Taxa) %>%
mutate(rowname=id, State=factor(State, levels = c("QLD", "NSW", "VIC", "SA", "WA", "SPAIN")),
Year=factor(Year, levels=as.character(min(Year, na.rm = TRUE):max(Year, na.rm = TRUE))),
Host=fct_relevel(fct_infreq(fct_lump_min(Host, min=6)), "Other", after = Inf),
Haplotype=fct_relevel(fct_infreq(fct_lump_min(Haplotype, min=2)), "Other", after = Inf),
Patho.Group=factor(Pathotype, levels=paste0("Group", 0:5))) %>%
mutate_at(vars(Year, Host, Haplotype, Patho.Group, Region), ~fct_explicit_na(., na_level = "Unknown")) %>%
column_to_rownames()
#### Exploratory Data Analysis ####
ploidy(Arab_gl) <- 1
gl.report.monomorphs(Arab_gl)  # all loci are polymorphic
# check reproducibility (RepAVG)
gl.report.repavg(Arab_gl)
# check multiple loci per tag and reproducibility
gl.report.secondaries(Arab_gl)
Arab_gl@strata <- strata_factors
setPop(Arab_gl) <- ~State
# apply filters for export
# find loci with high number of SNPs
snps_in_tag_thres <- 5
keep_loci <- Arab_gl@other$loc.metrics %>% count(CloneID) %>% filter(n<snps_in_tag_thres)
# remove Spain samples and loci with more than 5 SNPs
Arab_filt <- Arab_gl[!grepl("spain", indNames(Arab_gl), ignore.case = TRUE),
sub("^(\\d+)-.+", "\\1", locNames(Arab_gl)) %in% keep_loci$CloneID, treatOther=TRUE] %>%
gl.filter.monomorphs(v = 3)
Arab_filt@other$loc.metrics <- Arab_filt@other$loc.metrics %>% filter(CloneID %in% keep_loci$CloneID)
missing_thres <- 0.3
?gl.filter.repavg
Arab_filt@other$loc.metrics
